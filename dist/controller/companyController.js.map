{"version":3,"sources":["../../server/controller/companyController.js"],"names":["companyModel","require","adminModel","jwt","env","mongoose","encode","hashCode","randomstring","generateStrings","numberOfStrings","stringLength","callback","s","Set","size","add","generate","companyController","addCompany","req","res","next","console","log","body","token1","authorization","decoded","verify","App_key","role","parseInt","obj","dataobj","err","data","send","success","refference_code","value","values","code","isactive","push","length","company_name","company","save","json","getAllCount","count","isError","getAllCompany","find","_id","companyArray","forEach","element","index","array","generateReffCode","findOne","getInactiveReffCode","$and","$elemMatch","refferenceArray","itemsProcessed","item","module","exports"],"mappings":"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","file":"companyController.js","sourcesContent":["var companyModel =require( '../models/companyModel')\r\nvar adminModel=require( '../models/adminModel')\r\nvar jwt =require( 'jsonwebtoken');\r\nvar env =require( \"../env\");\r\nvar mongoose = require('mongoose');\r\nvar encode = require('hashcode').hashCode;\r\n\r\nvar randomstring = require(\"randomstring\");\r\n\r\n\r\nfunction generateStrings(numberOfStrings, stringLength,callback) {\r\n    const s = new Set()\r\n    while (s.size < numberOfStrings) {\r\n      s.add(randomstring.generate(stringLength))\r\n    }  \r\n    callback(null, s)\r\n} \r\nconst companyController = {\r\n   \r\n     addCompany: (req, res, next) => {\r\n        console.log(\"Company  register\", req.body)\r\n         var token1=  req.body.authorization;\r\n        var decoded = jwt.verify(token1, env.App_key);\r\n        console.log(\"decoded reqest from==>\", decoded.role)\r\n    \r\n        if (decoded.role=='admin') {      \r\n            var numberOfStrings=parseInt(req.body.numberOfStrings)\r\n            var stringLength =  parseInt(6)\r\n            var obj={};\r\n            var dataobj={\r\n                \r\n            }\r\n              generateStrings(numberOfStrings, stringLength,function(err,data){\r\n             if(err){\r\n                 console.log(\"Error==>\",err);\r\n     \r\n               res.send({success: false,data: err});\r\n             }else{\r\n                 var refference_code=[];\r\n                //  console.log(\"No Error==>\",data);       \r\n                 for (const value of data.values()) {\r\n                     console.log(value)\r\n                      obj = {code: value ,\r\n                        isactive:false};\r\n                    //  console.log(\"object ==>\",obj);\r\n                     \r\n                refference_code.push(obj)\r\n                 }\r\n\r\n                 if ( refference_code.length==numberOfStrings) {\r\n                     console.log(\"company Data==>\",refference_code);\r\n                     dataobj.refference_code=refference_code;\r\n                     dataobj.company_name=req.body.company_name;\r\n                     let company = new companyModel(dataobj);\r\n\r\n                     company.save(dataobj,function (err,company) {\r\n                         if (err) {\r\n                            res.send({success: false,data: err});\r\n                         } else {\r\n                            res.send({success: true,data: company});\r\n                         }\r\n                         \r\n                     })\r\n\r\n                    // companyModel.save(dataobj, function(err, company) {\r\n                    //     if (err) return res.json(err);\r\n                    //    res.send({success: true,data: company});\r\n                    // })\r\n                     \r\n                 }\r\n                //  res.send({success: true,data: data});\r\n                  \r\n                 \r\n                     \r\n             }\r\n         })\r\n        \r\n        } else {\r\n          res.json(\"Unauthorized access\");\r\n        }\r\n      },\r\n      getAllCount:(req,res,next)=>{\r\n          companyModel.count(function (err,company) {\r\n              if (err) {\r\n                  res.json({\r\n                      isError:true,\r\n                      data:err\r\n                  })\r\n                  \r\n              }\r\n              else{\r\n                  console.log(\"company count ==>\",company);\r\n                  \r\n                res.json({\r\n                    success:true,\r\n                    data:company\r\n                })\r\n              }\r\n              \r\n          })\r\n      },\r\n      getAllCompany:(req,res,next)=>{\r\n          console.log(\"Get all company..\");\r\n          \r\n        companyModel.find({},{company_name:1,_id:0},function (err,company) {\r\n            if (err) {\r\n                res.json({\r\n                    isError:true,\r\n                    data:err\r\n                })\r\n                \r\n            }\r\n            else{\r\n                var companyArray=[];\r\n                company.forEach((element,index,array) => {\r\n                    console.log(\"Element==>\",element.company_name);\r\n                    companyArray.push(element.company_name)\r\n                });\r\n                if (companyArray.length==company.length) {\r\n                    res.json({\r\n                        success:true,\r\n                        data:companyArray\r\n                    })\r\n                    \r\n                }\r\n             \r\n            }\r\n            \r\n        })\r\n    },\r\n      generateReffCode:(req,res,next)=>{\r\n      var token1=  req.body.authorization;\r\n        var decoded = jwt.verify(token1, env.App_key);\r\n        console.log(\"decoded reqest from==>\", decoded.role)\r\n\r\n        if (decoded.role=='admin') { \r\n           var company_name=req.body.company_name;\r\n           var numberOfStrings=parseInt(req.body.numberOfStrings)\r\n           var stringLength =  parseInt(6)\r\n           var obj={};\r\n           var dataobj={};\r\n           var count=0;\r\n            companyModel.findOne({company_name:company_name},function (err,company) {\r\n                \r\n                if (err) {\r\n                    res.json({\r\n                        isError:true,\r\n                        data:err\r\n                    })\r\n                    \r\n                } else {\r\n                    console.log(\"company==>\",company);\r\n                    \r\n                    \r\n                    generateStrings(numberOfStrings, stringLength,function(err,data){\r\n                        if(err){\r\n                            console.log(\"Error==>\",err);\r\n                \r\n                          res.send({success: false,data: err});\r\n                        }else{\r\n                                  \r\n                             for (const value of data.values()) {\r\n                                 count++;\r\n                                 console.log(value)\r\n                                  obj = {code: value ,\r\n                                    isactive:false};\r\n                                //  console.log(\"object ==>\",obj);\r\n                                 \r\n                                company.refference_code.push(obj)\r\n                             }\r\n            \r\n                             if ( count===numberOfStrings) {\r\n                                 console.log(\"company Data==>\",company);\r\n                                //  dataobj.refference_code=company.refference_code;\r\n                                //  let company = new companyModel(dataobj);\r\n            \r\n                                 company.save(function (err,company) {\r\n                                     if (err) {\r\n                                        res.send({success: false,data: err});\r\n                                     } else {\r\n                                        res.send({success: true,data: company});\r\n                                     }\r\n                                     \r\n                                 })\r\n                            }\r\n                        }\r\n                        })\r\n\r\n\r\n                }\r\n\r\n            })\r\n\r\n\r\n\r\n        }\r\n        else{\r\n            res.json(\"Unauthorized access\");\r\n        }\r\n\r\n\r\n      },\r\n      getInactiveReffCode:(req,res,next)=>{\r\n        var token1=  req.body.authorization;\r\n        var decoded = jwt.verify(token1, env.App_key);\r\n        console.log(\"decoded reqest from==>\", decoded.role)\r\n        var company_name=req.body.company_name;\r\n    \r\n        if (decoded.role=='admin') { \r\n            companyModel.find({\r\n                $and:[\r\n                    {company_name:company_name},\r\n                    {\"refference_code\": {$elemMatch: {\"isactive\" : false} } }\r\n                ]\r\n            }\r\n                ,{\"refference_code\": 1,_id:0},function (err,company) {\r\n                if (err) {\r\n                    res.json({\r\n                        isError:true,\r\n                        data:err\r\n                    })\r\n                    \r\n                }\r\n                else{\r\n                    console.log(\"getInactiveReffCode ==>\",company);\r\n                    if (company.length>0) {\r\n                        var refferenceArray=company[0].refference_code\r\n                        var refference_code=[];\r\n                        //  console.log(\"No Error==>\",data);   \r\n                        var itemsProcessed = 0;\r\n                        refferenceArray.forEach((item, index, array) => {\r\n                            console.log(\"Element==>\",item);\r\n                            \r\n                                itemsProcessed++;\r\n                                if (!item.isactive) {\r\n                                    console.log(\"item is not active==>\",item);\r\n                                    refference_code.push(item.code)\r\n                                }\r\n                                if(itemsProcessed === array.length) {\r\n                                    res.json({\r\n                                        success:true,\r\n                                        data:refference_code\r\n                                    })\r\n                                }\r\n       \r\n\r\n                    });\r\n                     \r\n                            \r\n                        \r\n                    } else {\r\n                        res.json({\r\n                            success:true,\r\n                            data:company\r\n                        })\r\n                    }\r\n                    \r\n                \r\n                }\r\n                \r\n            })\r\n\r\n\r\n        }\r\n        else{\r\n            res.json(\"Unauthorized access\");\r\n        }\r\n\r\n    \r\n    }\r\n      \r\n};\r\n\r\n\r\n// var token1=  req.body.authorization;\r\n// var decoded = jwt.verify(token1, env.App_key);\r\n// console.log(\"decoded reqest from==>\", decoded.role)\r\n\r\n// if (decoded.role=='admin') { }\r\n// else{\r\n//     res.json(\"Unauthorized access\");\r\n// }\r\n\r\n\r\n\r\nmodule.exports= companyController;"]}